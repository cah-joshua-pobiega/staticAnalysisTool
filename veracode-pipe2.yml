

resource_types:

 # maven resource for Nexus Binary repository
  - name: maven-resource
    type: docker-image
    source:
      repository:  "nexus-nonprod.cardinalhealth.net:8445/nulldriver/maven-resource"
      tag: ((MAVEN-IMAGE-TAG))

resources:
# The GIT resource from where to pull the source code
  - name: project-source
    type: git
    source:
      uri: ((GIT_REPO))
      branch: ((GIT_BRANCH))
      username: ((GIT_USERNAME))
      password: ((GIT_PASSWORD))
      ignore_paths:
      - version/


#Resource used  to store temporary build files, jar, tars, etc
# Here it uses NExus but it can any resources including external repo such as S3 and GCS
  - name: temp-storage
    type: maven-resource
    source:
     url: ((NEXUS_TEMP_BUILD_URL))
     artifact: com.cardinalhealth:((appName)):jar  # ex: com.cardinalhealth.myfile:myfile:jar
     username: ((NEXUS_USER))
     password: ((NEXUS_PASSWORD))



# Internal Nexus resource where to store build/binaries
  - name: nexus-snapshot
    type: maven-resource
    source:
     url: ((NEXUS_URL))
     snapshot_url: ((NEXUS_SNAPSHOT_URL))
     artifact: com.cardinalhealth:((appName)):jar   # ex: com.cardinalhealth.myfile:myfile:jar
     username: ((NEXUS_USER))
     password: ((NEXUS_PASSWORD))

# # Internal Nexus resource for security tools
#   - name: nexus-security-tools
#     type: maven-resource
#     source:
#      url: ((NEXUS_SECURITY_URL))
#      artifact: com.cardinalhealth:nexus-iq-cli:jar   # ex: com.cardinalhealth.myfile:myfile:jar
#      username: ((NEXUS_SECURITY_USER))
#      password: ((NEXUS_SECURITY_PASSWORD))

# Concourse native semantic versioning resource; here we use git a a "version" folder
# For info on usage refer to https://github.com/concourse/semver-resource
  - name: build-version
    type: semver
    source:
     driver: git
     initial_version: 0.0.1
     file: version/number
     uri: ((GIT_REPO))
     branch: ((GIT_BRANCH))
     username: ((GIT_USERNAME))
     password: ((GIT_PASSWORD))

jobs:
#Pull the source code, run unit test, build a new version ; update version, and run static analysis
- name: build-test-scan
  serial_groups: [buildTag]
  plan:
  - get: project-source
    trigger: true
  # - get: pipeline-source
  - get: build-version
  - aggregate:
    - task: build
      file: project-source/ci/tasks/build.yml
      params:
        <<: *env-params

  - put: temp-storage # Upload intermediate build to temp storage
    params:
     file: build-out/((appName))-*.jar
     version_file: build-out/version/number

# Publish Binary to Nexus- We deploy only artifacts that have made it through our quality gate!
# Retrieve temporary binaries form external repo(S3 Bucket) and push them to Nexus
- name: publish-snapshot
  plan:
  - aggregate:
    # - get: code-analysis
    #   trigger: true
    - get: temp-storage
      passed: [build-test-scan]
    - get: build-version
      params: ((VERSION_STRATEGY))  #increment the version- for bumping strategy see https://github.com/concourse/semver-resource#version-bumping-semantics
    - get: project-source
  - task: publish-snapshot
    file: project-source/ci/tasks/publish-snapshot.yml

# upload binary artifact to NExus; a version file must be specified
  - put: nexus-snapshot
    params:
     file: deploy-output/((appName)).jar
     version_file: deploy-output/version/number

# Save current version (on Git file called "number" under "version" folder)
# Be sure the pipeline run with the right credentials or this step will fail trying to commit the version number
  - put: build-version
    params:
     file: build-version/number

     #anchors
nexus-params: &nexus-params
 NEXUS_URL: ((NEXUS_URL)
 NEXUS_USER: ((NEXUS_USER))
 NEXUS_PASSWORD: ((NEXUS_PASSWORD))
 NEXUS_SNAPSHOT_URL: ((NEXUS_SNAPSHOT_URL))

env-param: &env-params
 CURRENT_ENV: ((CURRENT_ENV))
 APP_NAME: ((appName))

sonatypeIQ: &sonatypeIQ
 SONATYPE_IQ_USR: ((SONATYPE_IQ_USR))
 SONATYPE_IQ_PWD: ((SONATYPE_IQ_PWD))


sonar-properties: &sonar-properties
        sonar.projectKey: com.example.veracode
        sonar.projectName: "veracode"
        sonar.projectVersion: 0.0.0
        sonar.projectDescription: "Veracode Quality Check"
        sonar.sources: "."
        sonar.language: java
        sonar.sourceEncoding: UTF-8
        sonar.jacoco.reportPaths: "./build/jacoco/testCoverage.exec"
