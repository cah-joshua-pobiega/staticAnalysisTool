groups:
- name: ci-jobs
  jobs:
  - build-test-scan
  - check-dependencies
  - qualitygate
  - publish-snapshot
  - sast-scan

resource_types:
  # Performs SonarQube analyses and tracks the state of SonarQube quality gates
  # For parameters and usage refer to https://github.com/cathive/concourse-sonarqube-resource
  - name: sonar-runner
    type: docker-image
    source:
     repository: "nexus-nonprod.cardinalhealth.net:8445/cathive/concourse-sonarqube-resource"
     tag: ((SONAR-IMAGE-TAG))
    # For reproducible builds use a specific tag and don't rely on "latest".
    # Sonarqube URL http://wdil0219apbld15.dev.npch.int:9005/

 # maven resource for Nexus Binary repository
  - name: maven-resource
    type: docker-image
    source:
      repository:  "nexus-nonprod.cardinalhealth.net:8445/nulldriver/maven-resource"
      tag: ((MAVEN-IMAGE-TAG))

resources:
# The GIT resource from where to pull the source code
  - name: project-source
    type: git
    source:
      uri: ((GIT_REPO))
      branch: ((GIT_BRANCH))
      username: ((GIT_USERNAME))
      password: ((GIT_PASSWORD))
      ignore_paths:
      - version/

# # The GIT resource from where to pull the source code
#   - name: pipeline-source
#     type: git
#     source:
#       uri: ((GIT_PIPELINE_REPO))
#       branch: ((GIT_BRANCH))
#       username: ((GIT_USERNAME))
#       password: ((GIT_PASSWORD))
#       ignore_paths:
#       - version/

#Resource used  to store temporary build files, jar, tars, etc
# Here it uses NExus but it can any resources including external repo such as S3 and GCS
  - name: temp-storage
    type: maven-resource
    source:
     url: ((NEXUS_TEMP_BUILD_URL))
     artifact: com.cardinalhealth:((appName)):jar  # ex: com.cardinalhealth.myfile:myfile:jar
     username: ((NEXUS_USER))
     password: ((NEXUS_PASSWORD))

# Resource pointing to the base URL of the SonarQube server instance used
  - name: code-analysis
    type: sonar-runner
    source:
      host_url: ((SONAR_URL))
      login: ((SONAR_USER))
      password: ((SONAR_PASSWORD))
      #((sonarqube-auth-token))
      #project_key: com.example.my_project

# Internal Nexus resource where to store build/binaries
  - name: nexus-snapshot
    type: maven-resource
    source:
     url: ((NEXUS_URL))
     snapshot_url: ((NEXUS_SNAPSHOT_URL))
     artifact: com.cardinalhealth:((appName)):jar   # ex: com.cardinalhealth.myfile:myfile:jar
     username: ((NEXUS_USER))
     password: ((NEXUS_PASSWORD))

# Internal Nexus resource for security tools
  - name: nexus-security-tools
    type: maven-resource
    source:
     url: ((NEXUS_SECURITY_URL))
     artifact: com.cardinalhealth:nexus-iq-cli:jar   # ex: com.cardinalhealth.myfile:myfile:jar
     username: ((NEXUS_SECURITY_USER))
     password: ((NEXUS_SECURITY_PASSWORD))

# Concourse native semantic versioning resource; here we use git a a "version" folder
# For info on usage refer to https://github.com/concourse/semver-resource
  - name: build-version
    type: semver
    source:
     driver: git
     initial_version: 0.0.1
     file: version/number
     uri: ((GIT_REPO))
     branch: ((GIT_BRANCH))
     username: ((GIT_VERSION_USERNAME))
     password: ((GIT_VERSION_PASSWORD))

jobs:
#Pull the source code, run unit test, build a new version ; update version, and run static analysis
- name: build-test-scan
  serial_groups: [buildTag]
  plan:
  - get: project-source
    trigger: true
  # - get: pipeline-source
  - get: build-version
  - aggregate:
    - task: build
      file: project-source/ci/tasks/build.yml
      params:
        <<: *env-params
    # - task: test-scan
    #   file: project-source/ci/tasks/unit-test.yml
    #   params:
    #     <<: *env-params

 # put output in SonarQube resource for static analysis
  - put: code-analysis
    params:
      project_path: sonarqube-analysis-input
      additional_properties:
        #Will be passed as "-D<sonar property map> to the -uploadner.
        <<: *sonar-properties

  - put: temp-storage # Upload intermediate build to temp storage
    params:
     file: build-out/((appName))-*.jar
     version_file: build-out/version/number

#dependency and license checks - Secure by Default
- name: check-dependencies
  plan:
  - aggregate:
    - get: project-source
    - get: temp-storage
    - get: nexus-security-tools
    - get: code-analysis
      passed: [build-test-scan]
      trigger: true
    trigger: true
  - task: check-dependencies
    file: project-source/ci/tasks/check-dependencies.yml
    params:
      <<: *sonatypeIQ

# Quality Gate- The qualitygate task breaks the build if the analysis result from SonarQube
# indicates that any of our quality metrics have not been met. Quality metrics are define in Sonarqube
- name: qualitygate
  plan:
  - aggregate:
    - get: project-source
    - get: temp-storage
    - get: code-analysis
      passed: [check-dependencies]
      trigger: true
  - task: check-sonarqube-quality-gate
    file: project-source/ci/tasks/quality-gate-check.yml

- name: sast-scan
  plan:
  - aggregate:
    - get: temp-storage
      passed: [qualitygate]
      trigger: true
    - get: nexus-security-tools
    - get: project-source
    - get: build-version
    trigger: true
  - task: sast-scan
    file: project-source/ci/tasks/veracode-test.yml
    params:
      <<: *sonatypeIQ


# Publish Binary to Nexus- We deploy only artifacts that have made it through our quality gate!
# Retrieve temporary binaries form external repo(S3 Bucket) and push them to Nexus
- name: publish-snapshot
  plan:
  - aggregate:
    - get: code-analysis
      trigger: true
    - get: temp-storage
      passed: [qualitygate]
    - get: build-version
      params: ((VERSION_STRATEGY))  #increment the version- for bumping strategy see https://github.com/concourse/semver-resource#version-bumping-semantics
    - get: project-source
  - task: publish-snapshot
    file: project-source/ci/tasks/publish-snapshot.yml

# upload binary artifact to NExus; a version file must be specified
  - put: nexus-snapshot
    params:
     file: deploy-output/((appName)).jar
     version_file: deploy-output/version/number

# Save current version (on Git file called "number" under "version" folder)
# Be sure the pipeline run with the right credentials or this step will fail trying to commit the version number
  - put: build-version
    params:
     file: build-version/number

     #anchors
nexus-params: &nexus-params
 NEXUS_URL: ((NEXUS_URL)
 NEXUS_USER: ((NEXUS_USER))
 NEXUS_PASSWORD: ((NEXUS_PASSWORD))
 NEXUS_SNAPSHOT_URL: ((NEXUS_SNAPSHOT_URL))

env-param: &env-params
 CURRENT_ENV: ((CURRENT_ENV))
 APP_NAME: ((appName))

sonatypeIQ: &sonatypeIQ
 SONATYPE_IQ_USR: ((SONATYPE_IQ_USR))
 SONATYPE_IQ_PWD: ((SONATYPE_IQ_PWD))


sonar-properties: &sonar-properties
        sonar.projectKey: com.example.veracode
        sonar.projectName: "veracode"
        sonar.projectVersion: 0.0.0
        sonar.projectDescription: "Veracode Quality Check"
        sonar.sources: "."
        sonar.language: java
        sonar.sourceEncoding: UTF-8
        sonar.jacoco.reportPaths: "./build/jacoco/testCoverage.exec"
